{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","DefaultValue","isReversed","sortingOptions","setSortingOptions","visibleGoodsList","goods","sortedGoodList","sort","a","b","SortByLength","length","SortByAlphabet","localeCompare","reverse","getSortedGoodsList","handlerSetSortType","prevState","isSortingOptionsInstalled","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,2FAAAA,K,0BAAAA,E,sBAAAA,E,iBAAAA,M,KAyCE,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAA4CC,mBAAyB,CACnEC,SAAUJ,EAASK,aACnBC,YAAY,IAFd,mBAAOC,EAAP,KAAuBC,EAAvB,KAKMC,EAjDR,SACEC,EADF,GAGG,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,WAENK,EAAc,YAAOD,GAuB3B,OArBIN,GACFO,EAAeC,MAAK,SAACC,EAAGC,GACtB,OAAQV,GACN,KAAKJ,EAASe,aACZ,OAAOF,EAAEG,OAASF,EAAEE,OAGtB,KAAKhB,EAASiB,eACZ,OAAOJ,EAAEK,cAAcJ,GAGzB,QACE,OAAO,MAKXR,GACFK,EAAeQ,UAGVR,EAsBkBS,CACvBnB,EACAM,GAGIc,EAAqB,SAACjB,GAAD,OAAwB,WACjDI,GAAkB,SAACc,GAAD,mBAAC,eACdA,GADa,IAEhBlB,kBAkBEmB,EACJhB,EAAeH,UAAYG,EAAeD,WAG5C,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,EAAeH,WAAaJ,EAASiB,iBAErDU,QAASN,EAAmBrB,EAASiB,gBANvC,iCAWA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYnB,EAAeH,WAAaJ,EAASe,eACrDY,QAASN,EAAmBrB,EAASe,cAJvC,4BASA,wBACEU,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAanB,EAAeD,aAChCqB,QA7CqB,WAC3BnB,GAAkB,SAACc,GAAD,mBAAC,eACdA,GADa,IAEhBhB,YAAagB,EAAUhB,iBAsCrB,qBASCiB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA/CkB,WAC1BnB,EAAkB,CAChBJ,SAAUJ,EAASK,aACnBC,YAAY,KAyCR,sBAUJ,6BACE,6BACGG,EAAiBmB,KAAI,SAAAC,GAAI,OACxB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC1IpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b23da041.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum SortType {\n  SortByAlphabet = 'alphabet',\n  SortByLength = 'length',\n  DefaultValue = '',\n}\n\ninterface SortingOptions {\n  sortType: SortType,\n  isReversed: boolean,\n}\n\nfunction getSortedGoodsList(\n  goods: string[],\n  { sortType, isReversed }: SortingOptions,\n) {\n  const sortedGoodList = [...goods];\n\n  if (sortType) {\n    sortedGoodList.sort((a, b) => {\n      switch (sortType) {\n        case SortType.SortByLength: {\n          return a.length - b.length;\n        }\n\n        case SortType.SortByAlphabet: {\n          return a.localeCompare(b);\n        }\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    sortedGoodList.reverse();\n  }\n\n  return sortedGoodList;\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [sortingOptions, setSortingOptions] = useState<SortingOptions>({\n    sortType: SortType.DefaultValue,\n    isReversed: false,\n  });\n\n  const visibleGoodsList = getSortedGoodsList(\n    goodsFromServer,\n    sortingOptions,\n  );\n\n  const handlerSetSortType = (sortType: SortType) => () => {\n    setSortingOptions((prevState: SortingOptions) => ({\n      ...prevState,\n      sortType,\n    }));\n  };\n\n  const handlerSetIsReversed = () => {\n    setSortingOptions((prevState: SortingOptions) => ({\n      ...prevState,\n      isReversed: !prevState.isReversed,\n    }));\n  };\n\n  const resetSortingOptions = () => {\n    setSortingOptions({\n      sortType: SortType.DefaultValue,\n      isReversed: false,\n    });\n  };\n\n  const isSortingOptionsInstalled = (\n    sortingOptions.sortType || sortingOptions.isReversed\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortingOptions.sortType !== SortType.SortByAlphabet },\n          )}\n          onClick={handlerSetSortType(SortType.SortByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortingOptions.sortType !== SortType.SortByLength })}\n          onClick={handlerSetSortType(SortType.SortByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !sortingOptions.isReversed })}\n          onClick={handlerSetIsReversed}\n        >\n          Reverse\n        </button>\n\n        {isSortingOptionsInstalled && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetSortingOptions}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoodsList.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}